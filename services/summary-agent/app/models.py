"""Pydantic data models shared across the Summary Agent service."""

from __future__ import annotations

from datetime import date as Date, datetime, time
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, PositiveInt, conint, field_validator


class CityWeatherVariables(BaseModel):
    """Weather telemetry generated by Remote Agent 1."""

    temperature_c: float = Field(..., description="攝氏溫度 (°C)")
    humidity_percent: conint(ge=0, le=100) = Field(..., description="相對濕度 (百分比)")
    wind_speed_kmh: float = Field(..., ge=0, description="風速 (公里/時)")
    precipitation_chance_percent: conint(ge=0, le=100) = Field(
        ..., description="降雨機率 (百分比)"
    )
    precipitation_mm: float = Field(..., ge=0, description="預估降雨量 (毫米)")
    air_quality: str = Field(..., description="空氣品質描述")
    special_weather: Optional[str] = Field(
        None, description="額外的天氣描述，例如『午後雷陣雨』"
    )


class WeatherReport(BaseModel):
    """Structured output from the weather remote agent."""

    city: str = Field(..., description="查詢的城市")
    date: Date = Field(..., description="預報日期")
    time_range: str = Field(..., description="查詢的時間區段")
    summary: str = Field(..., description="LLM 產生的天氣摘要文字")
    variables: CityWeatherVariables


class StationInfo(BaseModel):
    origin: str = Field(..., description="出發車站")
    destination: str = Field(..., description="抵達車站")


class TimeInfo(BaseModel):
    departure: time = Field(..., description="出發時間")
    arrival: time = Field(..., description="抵達時間")

    def travel_minutes(self) -> int:
        """Return travel minutes assuming the trip happens on a single day."""

        start_dt = datetime.combine(Date.today(), self.departure)
        end_dt = datetime.combine(Date.today(), self.arrival)
        delta = end_dt - start_dt
        return max(int(delta.total_seconds() // 60), 0)


class PricingAndServiceInfo(BaseModel):
    price: PositiveInt = Field(..., description="票價 (新台幣)")
    service_number: str = Field(..., description="車次編號")


class TransportPlan(BaseModel):
    stations: StationInfo
    time: TimeInfo
    date: Date = Field(..., description="出發日期")
    pricing_and_service: PricingAndServiceInfo


class TransportPlanEnvelope(BaseModel):
    destination: str
    requested_arrival_time: time
    date: Date
    plans: List[TransportPlan]

    @field_validator("plans")
    @classmethod
    def ensure_plans_exist(cls, value: List[TransportPlan]) -> List[TransportPlan]:
        if not value:
            raise ValueError("transport plans cannot be empty")
        return value


class UserTravelRequirement(BaseModel):
    """Original requirement as specified by the user."""

    origin: str = Field(..., description="使用者所在地或出發地")
    destination: str = Field(..., description="預計前往的目的地")
    travel_date: Date = Field(..., description="出發日期")
    desired_arrival_time: Optional[time] = Field(
        None, description="希望抵達目的地的時間"
    )
    transport_note: Optional[str] = Field(
        None, description="交通相關偏好或附註"
    )


class RecommendationCriterion(str, Enum):
    SHORTEST_TRAVEL_TIME = "shortest_travel_time"
    LOWEST_PRICE = "lowest_price"
    CLOSEST_ARRIVAL = "closest_arrival"


class RecommendationItem(BaseModel):
    criterion: RecommendationCriterion
    title: str
    detail: str
    plan: TransportPlan


class SummaryResponse(BaseModel):
    task_id: str
    provider: str
    model: str
    overview: str
    recommended_plans: List[RecommendationItem]
    weather_summary: str
    weather_reminders: List[str]


class SummaryRequest(BaseModel):
    """Request payload accepted by the summary agent."""

    task_id: str = Field(..., description="Root agent assigned task ID")
    user_requirement: UserTravelRequirement
    weather_report: WeatherReport
    transport: TransportPlanEnvelope

